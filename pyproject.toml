[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "culora"
version = "0.1.0"
description = "Advanced LoRA Dataset Curation Utility - Intelligently curate image datasets for stable diffusion model training"
authors = ["Andrew Hite <andy@andyhite.com>"]
readme = "README.md"
packages = [{ include = "culora" }]

[tool.poetry.scripts]
culora = "culora.cli.main:app"

[tool.poetry.dependencies]
python = "^3.9"
# Core dependencies
typer = { extras = ["rich"], version = "^0.16.0" }
rich = "^14.1.0"
pydantic = "^2.5.0"
structlog = "^25.4.0"
pyyaml = "^6.0"

# Image processing
pillow = "^10.1.0"
numpy = "^1.26.0"
opencv-python = "^4.8.0"

# AI models and analysis
insightface = "^0.7.3"
mediapipe = "^0.10.8"
piq = "^0.8.0"
imagehash = "^4.3.1"
transformers = "^4.36.0"
torch = "^2.1.0"
sentence-transformers = "^2.2.2"
scikit-learn = "^1.3.0"

[tool.poetry.group.dev.dependencies]
# Code quality
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.7.0"
ruff = "^0.12.5"

# Testing
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-mock = "^3.12.0"

# Type stubs
types-pillow = "^10.1.0"
types-pyyaml = "^6.0.12.20250516"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["culora", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["insightface.*", "mediapipe.*", "imquality.*", "imagehash.*", "cv2.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "ARG002", # Unused method argument
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["TID252"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["culora"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
